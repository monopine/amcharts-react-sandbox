{"version":3,"sources":["data-sources.js","chart-types.js","reducers.js","actions.js","store.js","components/charts/chart-bar.js","components/charts/chart-line.js","components/charts/chart-pie.js","components/chart-canvas.js","components/charts-controls.js","actionCreators.js","index.js","App.js"],"names":["chartTypes","label","value","randomWholeInt","max","Math","floor","random","coffeeData","i","push","date","Date","name","excerciseData","dataSources","data","DEFAULT_STATE","chartType","activeDataSource","chartTypeOptions","dataSourceOptions","activeChartType","state","action","Object","assign","payload","rootReducer","type","store","createStore","reducer","ChartBar","chart","am4core","am4charts","paddingRight","this","props","dataSource","xAxes","renderer","grid","template","location","valueAxis","yAxes","tooltip","disabled","minWidth","series","dataFields","dateX","valueY","tooltipText","cursor","scrollbarX","dispose","id","style","width","height","Component","ChartLine","dateAxis","baseInterval","timeUnit","count","tooltipDateFormat","title","text","lineY","opacity","start","keepSelection","ChartPie","pieSeries","category","innerRadius","slices","stroke","strokeWidth","strokeOpacity","cursorOverStyle","property","alignLabels","labels","bent","radius","padding","ticks","filters","hoverShadow","states","getKey","blur","legend","country","litres","ChartCanvas","returnSelectedChart","ChartControls","map","option","key","result","find","className","renderSelectOptions","onChange","handleActiveChartType","renderDataOptions","handleActiveDataSource","returnSelectedData","connect","dispatch","event","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f5c04ece.chunk.js","sourcesContent":["let randomWholeInt = max => Math.floor(Math.random() * Math.floor(max));\n\nlet coffeeData = [];\nfor (let i = 1; i < 31; i++) {\n  coffeeData.push({\n    date: new Date(2020, 0, i),\n    name: \"dollars, day \" + i,\n    value: randomWholeInt(10)\n  });\n}\n\nlet excerciseData = [];\nfor (let i = 1; i < 31; i++) {\n  excerciseData.push({\n    date: new Date(2020, 0, i),\n    name: \"minutes, day \" + i,\n    value: randomWholeInt(180)\n  });\n}\n\nexport const dataSources = [\n  {\n    label: \"Daily Money Spent on Coffee, 30 day period\",\n    value: \"money-on-coffee-30day\",\n    data: coffeeData\n  },\n  {\n    label: \"Daily Excercise Minutes, 30 day period\",\n    value: \"excercise-minutes-30day\",\n    data: excerciseData\n  }\n];\n","export const chartTypes = [\n  {\n    label: \"Bar Graph\",\n    value: \"bar-graph\"\n  },\n  {\n    label: \"Line Graph\",\n    value: \"line-graph\"\n  },\n  {\n    label: \"Pie Chart\",\n    value: \"pie-chart\"\n  }\n];\n","// Actions\nimport { ACTIVE_CHART_TYPE, ACTIVE_DATA_SOURCE } from \"./actions\";\n\n// Data Sources & Configuration\nimport { chartTypes } from \"./chart-types\";\nimport { dataSources } from \"./data-sources\";\n\nconst DEFAULT_STATE = {\n  chartType: chartTypes[0].value,\n  activeDataSource: dataSources[0].value,\n  chartTypeOptions: chartTypes,\n  dataSourceOptions: dataSources\n};\n\nconst activeChartType = (state, action) => {\n  return Object.assign({}, state, { chartType: action.payload });\n};\n\nconst activeDataSource = (state, action) => {\n  return Object.assign({}, state, { activeDataSource: action.payload });\n};\n\nconst rootReducer = (state = DEFAULT_STATE, action) => {\n  switch (action.type) {\n    case ACTIVE_CHART_TYPE:\n      return activeChartType(state, action);\n    case ACTIVE_DATA_SOURCE:\n      return activeDataSource(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;\n","export const ACTIVE_CHART_TYPE = \"ACTIVE_CHART_TYPE\";\nexport const ACTIVE_DATA_SOURCE = \"ACTIVE_DATA_SOURCE\";\n","import { createStore } from 'redux';\nimport reducer from './reducers';\n\nconst store = createStore( reducer );\n\nexport default store;","import React, { Component } from \"react\";\n\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\nexport class ChartBar extends Component {\n  componentDidMount() {\n    let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\n\n    chart.paddingRight = 20;\n\n    chart.data = this.props.dataSource.data;\n\n    let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n    dateAxis.renderer.grid.template.location = 0;\n\n    let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n    valueAxis.tooltip.disabled = true;\n    valueAxis.renderer.minWidth = 35;\n\n    let series = chart.series.push(new am4charts.LineSeries());\n    series.dataFields.dateX = \"date\";\n    series.dataFields.valueY = \"value\";\n\n    series.tooltipText = \"{valueY.value}\";\n    chart.cursor = new am4charts.XYCursor();\n\n    let scrollbarX = new am4charts.XYChartScrollbar();\n    scrollbarX.series.push(series);\n    chart.scrollbarX = scrollbarX;\n\n    this.chart = chart;\n  }\n\n  componentDidUpdate() {\n    this.chart.data = this.props.dataSource.data;\n  }\n\n  componentWillUnmount() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  }\n\n  render() {\n    return <div id=\"chartdiv\" style={{ width: \"100%\", height: \"500px\" }} />;\n  }\n}\n","import React, { Component } from \"react\";\n\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\nexport class ChartLine extends Component {\n  componentDidMount() {\n    // Create chart\n    let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\n    chart.paddingRight = 20;\n\n    // chart.data = generateChartData();\n    chart.data = this.props.dataSource.data;\n\n    let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n    dateAxis.baseInterval = {\n      timeUnit: \"day\",\n      count: 1\n    };\n    dateAxis.tooltipDateFormat = \"HH:mm, d MMMM\";\n\n    let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n    valueAxis.tooltip.disabled = true;\n    valueAxis.title.text = \"Unique visitors\";\n\n    let series = chart.series.push(new am4charts.LineSeries());\n    // series.dataFields.dateX = \"date\";\n    // series.dataFields.valueY = \"visits\";\n    // series.tooltipText = \"Visits: [bold]{valueY}[/]\";\n    // series.fillOpacity = 0.3;\n\n    series.dataFields.dateX = \"date\";\n    series.dataFields.valueY = \"value\";\n\n    chart.cursor = new am4charts.XYCursor();\n    chart.cursor.lineY.opacity = 0;\n    chart.scrollbarX = new am4charts.XYChartScrollbar();\n    chart.scrollbarX.series.push(series);\n\n    dateAxis.start = 0.8;\n    dateAxis.keepSelection = true;\n  }\n\n  componentDidUpdate() {\n    this.chart.data = this.props.dataSource.data;\n  }\n\n  componentWillUnmount() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  }\n\n  render() {\n    return <div id=\"chartdiv\" style={{ width: \"100%\", height: \"500px\" }} />;\n  }\n}\n","import React, { Component } from \"react\";\n\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\nexport class ChartPie extends Component {\n  componentDidMount() {\n    let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\n    // Add and configure Series\n    let pieSeries = chart.series.push(new am4charts.PieSeries());\n    pieSeries.dataFields.value = \"litres\";\n    pieSeries.dataFields.category = \"country\";\n\n    // Let's cut a hole in our Pie chart the size of 30% the radius\n    chart.innerRadius = am4core.percent(30);\n\n    // Put a thick white border around each Slice\n    pieSeries.slices.template.stroke = am4core.color(\"#fff\");\n    pieSeries.slices.template.strokeWidth = 2;\n    pieSeries.slices.template.strokeOpacity = 1;\n    // change the cursor on hover to make it apparent the object can be interacted with\n    pieSeries.slices.template.cursorOverStyle = [\n      {\n        property: \"cursor\",\n        value: \"pointer\"\n      }\n    ];\n\n    pieSeries.alignLabels = false;\n    pieSeries.labels.template.bent = true;\n    pieSeries.labels.template.radius = 3;\n    pieSeries.labels.template.padding(0, 0, 0, 0);\n\n    pieSeries.ticks.template.disabled = true;\n\n    // Create a base filter effect (as if it's not there) for the hover to return to\n    let shadow = pieSeries.slices.template.filters.push(\n      new am4core.DropShadowFilter()\n    );\n    shadow.opacity = 0;\n\n    // Create hover state\n    let hoverState = pieSeries.slices.template.states.getKey(\"hover\"); // normally we have to create the hover state, in this case it already exists\n\n    // Slightly shift the shadow and make it more prominent on hover\n    let hoverShadow = hoverState.filters.push(new am4core.DropShadowFilter());\n    hoverShadow.opacity = 0.7;\n    hoverShadow.blur = 5;\n\n    // Add a legend\n    chart.legend = new am4charts.Legend();\n\n    chart.data = [\n      {\n        country: \"Lithuania\",\n        litres: 501.9\n      },\n      {\n        country: \"Germany\",\n        litres: 165.8\n      },\n      {\n        country: \"Australia\",\n        litres: 139.9\n      },\n      {\n        country: \"Austria\",\n        litres: 128.3\n      },\n      {\n        country: \"UK\",\n        litres: 99\n      },\n      {\n        country: \"Belgium\",\n        litres: 60\n      }\n    ];\n  }\n\n  componentWillUnmount() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  }\n\n  render() {\n    return <div id=\"chartdiv\" style={{ width: \"100%\", height: \"500px\" }} />;\n  }\n}\n","import React, { Component } from \"react\";\n\nimport { ChartBar } from \"./charts/chart-bar\";\nimport { ChartLine } from \"./charts/chart-line\";\nimport { ChartPie } from \"./charts/chart-pie\";\n\nexport class ChartCanvas extends Component {\n  returnSelectedChart() {\n    switch (this.props.chartType) {\n      case \"bar-graph\":\n        return <ChartBar dataSource={this.props.dataSource} />;\n      case \"line-graph\":\n        return <ChartLine dataSource={this.props.dataSource} />;\n      case \"pie-chart\":\n        return <ChartPie dataSource={this.props.dataSource} />;\n      default:\n        return null;\n    }\n  }\n\n  render() {\n    return <>{this.returnSelectedChart()}</>;\n  }\n}\n","import React, { Component } from \"react\";\n\n// Redux\nimport { connect } from \"react-redux\";\nimport { activeChartType, activeDataSource } from \"../actionCreators\";\n\n// Components\nimport { ChartCanvas } from \"./chart-canvas\";\n\nexport class ChartControls extends Component {\n  renderSelectOptions() {\n    const { chartTypeOptions } = this.props;\n\n    return chartTypeOptions.map((option, key) => {\n      return (\n        <option key={key} value={option.value}>\n          {option.label}\n        </option>\n      );\n    });\n  }\n\n  renderDataOptions() {\n    const { dataSourceOptions } = this.props;\n\n    return dataSourceOptions.map((option, key) => {\n      return (\n        <option key={key} value={option.value}>\n          {option.label}\n        </option>\n      );\n    });\n  }\n\n  returnSelectedData() {\n    const result = this.props.dataSourceOptions.find(\n      ({ value }) => value === this.props.activeDataSource\n    );\n\n    if (result) {\n      return result;\n    } else {\n      return null;\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"toolbar-wrap\">\n          {this.renderSelectOptions() && (\n            <select\n              id=\"chart-type\"\n              onChange={this.props.handleActiveChartType}\n              value={this.props.chartType}\n            >\n              {this.renderSelectOptions()}\n            </select>\n          )}\n          {this.renderDataOptions() && (\n            <select\n              id=\"data-source\"\n              onChange={this.props.handleActiveDataSource}\n              value={this.props.activeDataSource}\n            >\n              {this.renderDataOptions()}\n            </select>\n          )}\n        </div>\n\n        <ChartCanvas\n          chartType={this.props.chartType}\n          dataSource={this.returnSelectedData()}\n        />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  chartType: state.chartType,\n  activeDataSource: state.activeDataSource,\n  chartTypeOptions: state.chartTypeOptions,\n  dataSourceOptions: state.dataSourceOptions\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handleActiveChartType(event) {\n    dispatch(activeChartType(event.target.value));\n  },\n  handleActiveDataSource(event) {\n    dispatch(activeDataSource(event.target.value));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChartControls);\n","import { ACTIVE_CHART_TYPE } from \"./actions\";\nimport { ACTIVE_DATA_SOURCE } from \"./actions\";\n\nexport function activeChartType(chartType) {\n  return {\n    type: ACTIVE_CHART_TYPE,\n    payload: chartType\n  };\n}\n\nexport function activeDataSource(dataSource) {\n  return {\n    type: ACTIVE_DATA_SOURCE,\n    payload: dataSource\n  };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport ChartControls from \"./components/charts-controls\";\nimport \"./styles.css\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <div className=\"section-wrap\">\n          <h1>AMCharts Sandbox</h1>\n        </div>\n\n        <div className=\"section-wrap\">\n          <p>\n            Toggle the data source and the chart type. React will load a new\n            AMChart instance/component, and use data from Redux.\n          </p>\n        </div>\n\n        <div className=\"section-wrap\">\n          <ChartControls />\n        </div>\n      </Provider>\n    </div>\n  );\n}\n"],"sourceRoot":""}